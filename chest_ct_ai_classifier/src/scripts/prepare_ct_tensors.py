#!/usr/bin/env python3
"""
prepare_ct_for_medicalnet.py

–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ö–¢-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ MedicalNet —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–Ω–∑–æ—Ä—ã [1, 1, 128, 128, 128] —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è ResNet3D.
"""

import os
import argparse
import logging
from pathlib import Path
import numpy as np
import torch
import pydicom
import SimpleITK as sitk
from monai.data import MetaTensor
from monai.transforms import (
    EnsureChannelFirst,
    Spacing,
    ScaleIntensityRange,
    CropForeground,
    Resize,
    NormalizeIntensity,
    ToTensor,
    Compose
)
from concurrent.futures import ProcessPoolExecutor, as_completed
import traceback
from tqdm import tqdm
import json

# -------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è MedicalNet
# -------------------------------
TARGET_SHAPE = (128, 128, 128)  # D, H, W –¥–ª—è 3D ResNet
# –î–ª—è CT –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ—Ç—Ä–æ–ø–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 1–º–º¬≥
TARGET_SPACING = (1.0, 1.0, 1.0)  # –º–º/–≤–æ–∫—Å–µ–ª—å [D, H, W]
# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ HU –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è CT (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏)
HU_MIN = -1000  # –≤–æ–∑–¥—É—Ö
HU_MAX = 1000  # –ø–ª–æ—Ç–Ω–∞—è –∫–æ—Å—Ç—å (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏)
# MedicalNet –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–ù–ï ImageNet!)
# –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è zero-mean unit-variance
MEDICAL_MEAN = 0.0
MEDICAL_STD = 1.0


# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------
def setup_logging(log_file: Path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    log_file.parent.mkdir(parents=True, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)


# -------------------------------
# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ MONAI –¥–ª—è MedicalNet
# -------------------------------
def get_transforms():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª—è MedicalNet"""
    return Compose([
        EnsureChannelFirst(channel_dim="no_channel"),
        # –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º spacing
        Spacing(pixdim=TARGET_SPACING, mode="bilinear", padding_mode="zeros"),
        # –û–±—Ä–µ–∑–∞–µ–º —Ñ–æ–Ω –ü–û–°–õ–ï —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –∏ –ü–û–°–õ–ï –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ HU
        CropForeground(select_fn=lambda x: x > -800,  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
                       channel_indices=0, margin=5),
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º HU –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1] –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        ScaleIntensityRange(a_min=HU_MIN, a_max=HU_MAX,
                            b_min=0.0, b_max=1.0, clip=True),
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ü–û–°–õ–ï –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        Resize(spatial_size=TARGET_SHAPE, mode="trilinear", align_corners=False),
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ (zero-mean, unit-variance)
        NormalizeIntensity(subtrahend=0.5, divisor=0.5),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç [0,1] –≤ [-1,1]
        ToTensor()
    ])


# -------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
# -------------------------------
def validate_tensor_size(tensor, min_size=16):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–Ω–∑–æ—Ä –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if len(tensor.shape) == 3:
        d, h, w = tensor.shape
    elif len(tensor.shape) == 4 and tensor.shape[0] == 1:
        _, d, h, w = tensor.shape
        tensor = tensor.squeeze(0)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
    else:
        raise ValueError(f"Unexpected tensor shape: {tensor.shape}")

    if min(d, h, w) < min_size:
        raise ValueError(f"Tensor too small: {(d, h, w)}, minimum size: {min_size}")

    return tensor

def _load_single_dicom_file(single_file: Path) -> MetaTensor:
    """
    –ß–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π DICOM-—Ñ–∞–π–ª (multi-frame –∏–ª–∏ single-frame).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Tensor —Ñ–æ—Ä–º–∞—Ç–∞ (C, D, H, W).
    """
    ds = pydicom.dcmread(str(single_file), force=True)
    num_frames = int(getattr(ds, "NumberOfFrames", 1))

    if num_frames > 1:
        # ---- Multi-frame ----
        pixel_array = ds.pixel_array  # (frames, H, W)
        spacing = [
            float(getattr(ds, "PixelSpacing", [1.0, 1.0])[0]),
            float(getattr(ds, "PixelSpacing", [1.0, 1.0])[1]),
            float(getattr(ds, "SpacingBetweenSlices", 1.0)),
        ]
        tensor = torch.from_numpy(pixel_array.astype(np.float32))
        tensor = tensor.unsqueeze(0)  # (1, D, H, W)
        return MetaTensor(tensor, affine=np.diag(spacing + [1]))

    else:
        # ---- Single-frame ----
        pixel_array = ds.pixel_array  # (H, W)
        spacing = [
            float(getattr(ds, "PixelSpacing", [1.0, 1.0])[0]),
            float(getattr(ds, "PixelSpacing", [1.0, 1.0])[1]),
            1.0,
        ]
        tensor = torch.from_numpy(pixel_array.astype(np.float32))
        tensor = tensor.unsqueeze(0).unsqueeze(0)  # (1, 1, H, W)
        return MetaTensor(tensor, affine=np.diag(spacing + [1]))

# -------------------------------
# –ó–ê–ì–†–£–ó–ß–ò–ö DICOM —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
# -------------------------------
# –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é load_dicom_series –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é
def load_dicom_series(dicom_folder: Path) -> MetaTensor:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç DICOM —Å–µ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç MetaTensor —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é —Å–µ—Ä–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã—Ö DICOM-—Ñ–∞–π–ª–æ–≤ (SimpleITK ImageSeriesReader)
      - –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤—ã–π DICOM –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ (pydicom, NumberOfFrames > 1)
    """

    try:
        # -------------------------------------------------------------
        # 1Ô∏è‚É£  –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ñ–∞–π–ª ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º
        # -------------------------------------------------------------
        files = sorted([p for p in dicom_folder.iterdir()
                        if p.is_file() and not p.name.startswith('.')])
        if len(files) == 1:
            single = files[0]
            # üîë –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –≤ –≤–µ—Ç–∫—É pydicom_multiframe
            return _load_single_dicom_file(single)  # <- —Å–º. —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∏–∂–µ

        # -------------------------------------------------------------
        # 2Ô∏è‚É£  –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é —Å–µ—Ä–∏—é —á–µ—Ä–µ–∑ SimpleITK
        # -------------------------------------------------------------
        reader = sitk.ImageSeriesReader()
        series_IDs = reader.GetGDCMSeriesIDs(str(dicom_folder))
        if series_IDs:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é (–æ–±—ã—á–Ω–æ –æ—Å–Ω–æ–≤–Ω—É—é)
            series_file_names = reader.GetGDCMSeriesFileNames(str(dicom_folder), series_IDs[0])
            if len(series_file_names) < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å—Ä–µ–∑–∞ –¥–ª—è 3D
                raise ValueError(f"Too few DICOM slices: {len(series_file_names)}")

            reader.SetFileNames(series_file_names)
            reader.MetaDataDictionaryArrayUpdateOn()
            reader.LoadPrivateTagsOn()
            sitk_image = reader.Execute()

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            original_size = sitk_image.GetSize()  # [W, H, D]
            original_spacing = sitk_image.GetSpacing()  # [W, H, D] –≤ –º–º

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
            if any(s <= 0 for s in original_size):
                raise ValueError(f"Invalid image dimensions: {original_size}")

            image_array = sitk.GetArrayFromImage(sitk_image).astype(np.float32)  # [D, H, W]

            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å rescale –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Ä–∏–∏
            slope, intercept = 1.0, 0.0
            try:
                first_file = series_file_names[0]
                dcm = pydicom.dcmread(first_file, stop_before_pixels=True)
                slope = float(getattr(dcm, 'RescaleSlope', 1.0))
                intercept = float(getattr(dcm, 'RescaleIntercept', 0.0))
            except Exception:
                pass

            # spacing –≤ —Ñ–æ—Ä–º–∞—Ç–µ [D,H,W]
            spacing_dhw = [original_spacing[2], original_spacing[1], original_spacing[0]]

            meta_dict = {
                'spacing': spacing_dhw,
                'original_shape': image_array.shape,
                'original_spacing': original_spacing,
                'filename_or_obj': str(dicom_folder),
                'rescale_slope': slope,
                'rescale_intercept': intercept,
                'source': 'sitk_series'
            }

            meta_tensor = MetaTensor(image_array, meta=meta_dict)
            logging.debug(f"Loaded SITK series {dicom_folder.name}: shape={image_array.shape}, spacing={spacing_dhw}")
            return meta_tensor

        # –ï—Å–ª–∏ —Å–µ—Ä–∏–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –æ–¥–∏–Ω —Ñ–∞–π–ª (multi-frame) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        files = sorted([p for p in dicom_folder.iterdir() if p.is_file() and not p.name.startswith('.')])
        if not files:
            raise FileNotFoundError(f"No files found in {dicom_folder}")

        # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ñ–∞–π–ª ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º DICOM
        if len(files) == 1:
            single = files[0]
            try:
                ds = pydicom.dcmread(str(single), force=True)
            except Exception as e:
                raise Exception(f"Cannot read DICOM file {single}: {e}")

            num_frames = int(getattr(ds, 'NumberOfFrames', 1))
            # –ï—Å–ª–∏ –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–Ω—ã–π DICOM
            if num_frames > 1:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å pixel array (–ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ pixel handlers)
                try:
                    pixel_array = ds.pixel_array  # shape: (frames, rows, cols) –æ–±—ã—á–Ω–æ
                except Exception as e:
                    raise Exception(f"Could not extract pixel_array from {single}: {e}")

                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float32
                image_array = np.asarray(pixel_array).astype(np.float32)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã)
                if image_array.ndim == 4 and image_array.shape[-1] in (1, 3):
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Å—å - –∫–∞–Ω–∞–ª—ã, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ (frames, H, W)
                    if image_array.shape[-1] == 1:
                        image_array = image_array[..., 0]
                    else:
                        # –ï—Å–ª–∏ RGB - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª (–æ–±—ã—á–Ω–æ –¥–ª—è CT –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)
                        image_array = image_array[..., 0]

                # –ü—Ä–∏–≤–æ–¥–∏–º shape –∫ [D, H, W]
                if image_array.ndim != 3:
                    raise ValueError(f"Unexpected pixel array shape for multi-frame DICOM: {image_array.shape}")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å–∫–µ–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                slope = float(getattr(ds, 'RescaleSlope', 1.0))
                intercept = float(getattr(ds, 'RescaleIntercept', 0.0))

                # –°—á–∏—Ç—ã–≤–∞–µ–º spacing: PixelSpacing -> [row, col], –∏ SpacingBetweenFrames/SliceThickness
                pixel_spacing = None
                slice_spacing = None

                if hasattr(ds, 'PixelSpacing'):
                    try:
                        ps = ds.PixelSpacing
                        # PixelSpacing –æ–±—ã—á–Ω–æ [rowSpacing, colSpacing]
                        pixel_spacing = (float(ps[0]), float(ps[1]))
                    except Exception:
                        pixel_spacing = None

                # –°–ø–æ—Å–æ–±1: SpacingBetweenFrames
                if hasattr(ds, 'SpacingBetweenFrames'):
                    try:
                        slice_spacing = float(ds.SpacingBetweenFrames)
                    except Exception:
                        slice_spacing = None

                # –°–ø–æ—Å–æ–±2: SliceThickness
                if slice_spacing is None and hasattr(ds, 'SliceThickness'):
                    try:
                        slice_spacing = float(ds.SliceThickness)
                    except Exception:
                        slice_spacing = None

                # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å spacing –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –ø–æ Per-frame Functional Groups Sequence
                if slice_spacing is None and hasattr(ds, 'PerFrameFunctionalGroupsSequence'):
                    try:
                        seq = ds.PerFrameFunctionalGroupsSequence
                        if len(seq) >= 2:
                            ipp0 = None
                            ipp1 = None
                            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ DICOM –∏—Å–ø–æ–ª—å–∑—É—é—Ç ImagePositionPatient –≤–Ω—É—Ç—Ä–∏ FrameContentSequence -> PlanePositionSequence
                            # –ù–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ–µ –≤ PerFrameFunctionalGroupsSequence/.../PlanePositionSequence/ImagePositionPatient
                            def get_ipp(frame_item):
                                try:
                                    if hasattr(frame_item, 'PlanePositionSequence'):
                                        pps = frame_item.PlanePositionSequence
                                        return [float(x) for x in pps[0].ImagePositionPatient]
                                    # Newer structure
                                    if hasattr(frame_item, 'FrameContentSequence') and hasattr(frame_item.FrameContentSequence[0], 'PlanePositionSequence'):
                                        pps = frame_item.FrameContentSequence[0].PlanePositionSequence
                                        return [float(x) for x in pps[0].ImagePositionPatient]
                                except Exception:
                                    return None
                                return None

                            ipp0 = get_ipp(seq[0]) or None
                            ipp1 = get_ipp(seq[1]) or None
                            if ipp0 is not None and ipp1 is not None:
                                # z spacing = abs(z1 - z0) (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                                slice_spacing = abs(ipp1[2] - ipp0[2])
                    except Exception:
                        slice_spacing = None

                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º 1.0mm (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç)
                if pixel_spacing is None:
                    logging.warning(f"No PixelSpacing found in {single}, defaulting to (1.0, 1.0)")
                    pixel_spacing = (1.0, 1.0)
                if slice_spacing is None:
                    logging.warning(f"No slice spacing found in {single}, defaulting to 1.0 mm")
                    slice_spacing = 1.0

                # –ü—Ä–∏–º–µ–Ω—è–µ–º rescale (HU)
                if slope != 1.0 or intercept != 0.0:
                    image_array = image_array * slope + intercept

                # –§–æ—Ä–º–∏—Ä—É–µ–º spacing –≤ —Ñ–æ—Ä–º–∞—Ç–µ [D, H, W]
                spacing_dhw = [slice_spacing, pixel_spacing[0], pixel_spacing[1]]

                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                hu_min, hu_max = float(image_array.min()), float(image_array.max())
                if hu_min == hu_max:
                    raise ValueError(f"Constant image values in {single}: {hu_min}")

                meta_dict = {
                    'spacing': spacing_dhw,
                    'original_shape': image_array.shape,
                    'original_spacing': spacing_dhw,
                    'filename_or_obj': str(single),
                    'rescale_slope': slope,
                    'rescale_intercept': intercept,
                    'hu_range': (hu_min, hu_max),
                    'source': 'pydicom_multiframe',
                    'num_frames': num_frames
                }

                meta_tensor = MetaTensor(image_array, meta=meta_dict)
                logging.debug(f"Loaded multi-frame DICOM {single.name}: frames={num_frames}, shape={image_array.shape}, spacing={spacing_dhw}")
                return meta_tensor

            # –ï—Å–ª–∏ single —Ñ–∞–π–ª, –Ω–æ NumberOfFrames == 1 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—ã—á–Ω—ã–π single-slice DICOM; –Ω–æ –¥–ª—è 3D –Ω—É–∂–µ–Ω –Ω–∞–±–æ—Ä
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å–µ—Ä–∏—è –∏–∑ –æ–¥–Ω–æ–≥–æ —Å—Ä–µ–∑–∞ (–≤–µ—Ä–Ω—ë–º 1-—Å—Ä–µ–∑–Ω—ã–π —Ç–æ–º)
            else:
                try:
                    pixel_array = ds.pixel_array.astype(np.float32)
                except Exception as e:
                    raise Exception(f"Could not extract pixel_array from single-frame DICOM {single}: {e}")

                # –°–¥–µ–ª–∞–µ–º shape [1, H, W]
                if pixel_array.ndim == 2:
                    image_array = np.expand_dims(pixel_array, axis=0).astype(np.float32)
                elif pixel_array.ndim == 3:
                    image_array = pixel_array.astype(np.float32)
                else:
                    raise ValueError(f"Unexpected pixel array shape for single file: {pixel_array.shape}")

                slope = float(getattr(ds, 'RescaleSlope', 1.0))
                intercept = float(getattr(ds, 'RescaleIntercept', 0.0))
                if slope != 1.0 or intercept != 0.0:
                    image_array = image_array * slope + intercept

                pixel_spacing = (1.0, 1.0)
                if hasattr(ds, 'PixelSpacing'):
                    try:
                        ps = ds.PixelSpacing
                        pixel_spacing = (float(ps[0]), float(ps[1]))
                    except Exception:
                        pass
                slice_thickness = float(getattr(ds, 'SliceThickness', 1.0))

                spacing_dhw = [slice_thickness, pixel_spacing[0], pixel_spacing[1]]
                hu_min, hu_max = float(image_array.min()), float(image_array.max())

                meta_dict = {
                    'spacing': spacing_dhw,
                    'original_shape': image_array.shape,
                    'original_spacing': spacing_dhw,
                    'filename_or_obj': str(single),
                    'rescale_slope': slope,
                    'rescale_intercept': intercept,
                    'hu_range': (hu_min, hu_max),
                    'source': 'pydicom_singlefile'
                }

                return MetaTensor(image_array, meta=meta_dict)

        # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ >1 —Ñ–∞–π–ª, –Ω–æ SimpleITK –Ω–µ –≤–µ—Ä–Ω—É–ª series_IDs (—Ä–µ–¥–∫–∏–π –∫–µ–π—Å) ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–±–æ—Ä–∫—É –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ InstanceNumber
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞: —á–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ InstanceNumber –∏–ª–∏ –ø–æ filename, —Å–æ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤
        dicom_files = []
        for p in files:
            try:
                ds = pydicom.dcmread(str(p), stop_before_pixels=True, force=True)
                inst = getattr(ds, 'InstanceNumber', None)
                dicom_files.append((p, inst))
            except Exception:
                # –µ—Å–ª–∏ —á—Ç–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
                dicom_files.append((p, None))
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ InstanceNumber –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        dicom_files_sorted = sorted(dicom_files, key=lambda x: (x[1] is None, x[1] if x[1] is not None else 0, str(x[0])))
        series_file_names = [str(x[0]) for x in dicom_files_sorted]

        # –ï—Å–ª–∏ –º–∞–ª–æ —Ñ–∞–π–ª–æ–≤ ‚Äî –æ—à–∏–±–∫–∞
        if len(series_file_names) < 3:
            raise ValueError(f"Too few DICOM slices (fallback aggregation): {len(series_file_names)}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SITK —á–∏—Ç–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ–π —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        reader = sitk.ImageSeriesReader()
        reader.SetFileNames(series_file_names)
        reader.MetaDataDictionaryArrayUpdateOn()
        reader.LoadPrivateTagsOn()
        sitk_image = reader.Execute()
        image_array = sitk.GetArrayFromImage(sitk_image).astype(np.float32)  # [D,H,W]
        original_spacing = sitk_image.GetSpacing()  # [W,H,D]
        spacing_dhw = [original_spacing[2], original_spacing[1], original_spacing[0]]

        # –ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å rescale –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        slope, intercept = 1.0, 0.0
        try:
            dcm = pydicom.dcmread(series_file_names[0], stop_before_pixels=True)
            slope = float(getattr(dcm, 'RescaleSlope', 1.0))
            intercept = float(getattr(dcm, 'RescaleIntercept', 0.0))
        except Exception:
            pass

        if slope != 1.0 or intercept != 0.0:
            image_array = image_array * slope + intercept

        meta_dict = {
            'spacing': spacing_dhw,
            'original_shape': image_array.shape,
            'original_spacing': original_spacing,
            'filename_or_obj': str(dicom_folder),
            'rescale_slope': slope,
            'rescale_intercept': intercept,
            'hu_range': (float(image_array.min()), float(image_array.max())),
            'source': 'sitk_fallback'
        }
        return MetaTensor(image_array, meta=meta_dict)

    except Exception as e:
        raise Exception(f"Failed to load DICOM from {dicom_folder}: {str(e)}")



# -------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
# -------------------------------
def process_single_patient(patient_dir: Path, output_dir: Path, verbose: bool = False) -> dict:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    result = {
        'patient_name': patient_dir.name,
        'success': False,
        'error': None,
        'output_path': None,
        'original_shape': None,
        'final_shape': None,
        'original_spacing': None,
        'hu_range_input': None,
        'value_range_output': None,
        'mean': None,
        'std': None
    }

    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º DICOM
        ct_meta_tensor = load_dicom_series(patient_dir)
        original_shape = ct_meta_tensor.shape
        result['original_shape'] = original_shape
        result['original_spacing'] = ct_meta_tensor.meta.get('spacing')
        result['hu_range_input'] = ct_meta_tensor.meta.get('hu_range')

        if verbose:
            logging.info(f"Loaded {patient_dir.name}: {original_shape}")

        # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        validated_tensor = validate_tensor_size(ct_meta_tensor)

        # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        transform = get_transforms()
        transformed_tensor = transform(validated_tensor)

        # 4. –î–æ–±–∞–≤–ª—è–µ–º batch dimension
        final_tensor = transformed_tensor.unsqueeze(0)  # [1, 1, 128, 128, 128]

        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        expected_shape = (1, 1, 128, 128, 128)
        if final_tensor.shape != expected_shape:
            raise ValueError(f"Wrong output shape: {final_tensor.shape}, expected: {expected_shape}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if torch.isnan(final_tensor).any():
            raise ValueError("NaN values in final tensor")

        if torch.isinf(final_tensor).any():
            raise ValueError("Infinite values in final tensor")

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_path = output_dir / f"{patient_dir.name}.pt"
        torch.save(final_tensor, output_path)

        # 7. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.update({
            'success': True,
            'output_path': str(output_path),
            'final_shape': tuple(final_tensor.shape),
            'value_range_output': (float(final_tensor.min()), float(final_tensor.max())),
            'mean': float(final_tensor.mean()),
            'std': float(final_tensor.std())
        })

        if verbose:
            logging.info(f"‚úì {patient_dir.name}: "
                         f"range=[{result['value_range_output'][0]:.3f}, {result['value_range_output'][1]:.3f}], "
                         f"mean={result['mean']:.3f}, std={result['std']:.3f}")

    except Exception as e:
        result['error'] = str(e)
        if verbose:
            logging.error(f"‚ùå {patient_dir.name}: {e}")
            logging.debug(traceback.format_exc())

    return result


# -------------------------------
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# -------------------------------
def main():
    parser = argparse.ArgumentParser(
        description="Prepare CT DICOM volumes for MedicalNet 3D ResNet models")
    parser.add_argument("--input", type=str, required=True,
                        help="Input directory with patient subdirectories containing DICOM files")
    parser.add_argument("--output", type=str, required=True,
                        help="Output directory for processed .pt tensor files")
    parser.add_argument("--verbose", action="store_true",
                        help="Enable verbose logging with detailed progress")
    parser.add_argument("--num-workers", type=int, default=1,
                        help="Number of parallel workers (default: 1)")
    parser.add_argument("--log-file", type=str, default="logs/prepare_ct_medicalnet.log",
                        help="Log file path")

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    input_dir = Path(args.input)
    output_dir = Path(args.output)
    output_dir.mkdir(parents=True, exist_ok=True)

    log_file = Path(args.log_file)
    logger = setup_logging(log_file)

    if not input_dir.exists():
        logger.error(f"Input directory does not exist: {input_dir}")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    patient_dirs = [d for d in input_dir.iterdir()
                    if d.is_dir() and not d.name.startswith('.')]

    if not patient_dirs:
        logger.error(f"No patient directories found in {input_dir}")
        return

    logger.info(f"Found {len(patient_dirs)} patient directories")
    logger.info(f"Target tensor shape: {(1, 1) + TARGET_SHAPE}")
    logger.info(f"Target spacing: {TARGET_SPACING} mm")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    results_summary = {
        'total': len(patient_dirs),
        'successful': 0,
        'failed': 0,
        'errors': [],
        'config': {
            'target_shape': TARGET_SHAPE,
            'target_spacing': TARGET_SPACING,
            'hu_range': [HU_MIN, HU_MAX],
            'normalization': 'zero_mean_unit_variance'
        }
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    logger.info("Starting processing...")

    for patient_dir in tqdm(patient_dirs, desc="Processing patients"):
        result = process_single_patient(patient_dir, output_dir, args.verbose)

        if result['success']:
            results_summary['successful'] += 1
        else:
            results_summary['failed'] += 1
            results_summary['errors'].append({
                'patient': result['patient_name'],
                'error': result['error']
            })

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_file = output_dir / "processing_report.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(results_summary, f, indent=2, ensure_ascii=False)

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'=' * 60}")
    logger.info("PROCESSING COMPLETED")
    logger.info(f"Total patients: {results_summary['total']}")
    logger.info(f"Successfully processed: {results_summary['successful']}")
    logger.info(f"Failed: {results_summary['failed']}")
    logger.info(f"Success rate: {100 * results_summary['successful'] / results_summary['total']:.1f}%")
    logger.info(f"Output directory: {output_dir}")
    logger.info(f"Report saved to: {report_file}")
    logger.info(f"{'=' * 60}")

    if results_summary['failed'] > 0:
        logger.warning(f"‚ö†Ô∏è  {results_summary['failed']} patients failed. Check the report for details.")

    logger.info("Done! ‚úÖ")


if __name__ == "__main__":
    main()