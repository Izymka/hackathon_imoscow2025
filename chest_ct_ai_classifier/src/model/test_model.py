import torch
import os
import matplotlib.pyplot as plt
import seaborn as sns
from torch.utils.data import DataLoader
from sklearn.metrics import confusion_matrix, classification_report
from model_evaluate import evaluate_model, plot_roc_curve
from datasets.medical_tensors import MedicalTensorDataset
from model_generator import generate_model
from config import ModelConfig
import numpy as np
from collections import OrderedDict


def find_best_checkpoint():
    """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ .ckpt"""
    checkpoint_path = 'model/outputs/weights/best-epoch=17-val_f1=0.8682-val_recall=0.8615-val_specificity=0.8644--val_auroc=0.9168.ckpt'

    if os.path.exists(checkpoint_path):
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç: {checkpoint_path}")
        return checkpoint_path

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
    checkpoint_dir = 'model/outputs/checkpoints'
    if os.path.exists(checkpoint_dir):
        ckpt_files = [f for f in os.listdir(checkpoint_dir) if f.endswith('.ckpt')]
        if ckpt_files:
            ckpt_files.sort(key=lambda x: os.path.getctime(os.path.join(checkpoint_dir, x)), reverse=True)
            checkpoint_path = os.path.join(checkpoint_dir, ckpt_files[0])
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π .ckpt: {checkpoint_path}")
            return checkpoint_path

    print(f"‚ùå –ß–µ–∫–ø–æ–∏–Ω—Ç .ckpt –Ω–µ –Ω–∞–π–¥–µ–Ω: {checkpoint_path}")
    return None


def load_model_checkpoint(checkpoint_path, cfg, device):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ .ckpt """
    print("=" * 60)
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ModelConfig –≤ namespace
    class OptNamespace:
        pass

    opt = OptNamespace()
    for key, value in cfg.__dict__.items():
        setattr(opt, key, value)

    # –í–∞–∂–Ω–æ: phase='test' –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    opt.phase = 'test'
    opt.gpu_id = [0] if not cfg.no_cuda and torch.cuda.is_available() else []

    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¢–û–ß–ù–û –¢–ê–ö –ñ–ï, –∫–∞–∫ –≤ train.py
    model, _ = generate_model(opt)
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∑–∫–∞ checkpoint
    try:
        checkpoint = torch.load(checkpoint_path, map_location=device, weights_only=False)
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω .ckpt —Ñ–∞–π–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(checkpoint.keys())}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .ckpt: {e}")
        return None

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ state_dict
    if 'state_dict' in checkpoint:
        state_dict = checkpoint['state_dict']
        print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç PyTorch Lightning (state_dict)")
    elif 'model_state_dict' in checkpoint:
        state_dict = checkpoint['model_state_dict']
        print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç model_state_dict")
    else:
        state_dict = checkpoint
        print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä—è–º–æ–π state_dict")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
    new_state_dict = OrderedDict()
    for k, v in state_dict.items():
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        new_key = k
        if k.startswith('model.'):
            new_key = k[6:]
        elif k.startswith('module.'):
            new_key = k[7:]
        elif k.startswith('net.'):
            new_key = k[4:]
        elif k.startswith('encoder.'):
            new_key = k[8:]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not any(skip in new_key for skip in ['loss_fn', 'criterion', 'optimizer', 'scheduler']):
            new_state_dict[new_key] = v

    # –ó–∞–≥—Ä—É–∑–∫–∞ state_dict –≤ –º–æ–¥–µ–ª—å
    try:
        missing_keys, unexpected_keys = model.load_state_dict(new_state_dict, strict=False)

        if missing_keys:
            print(
                f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ ({len(missing_keys)}): {missing_keys[:5]}{'...' if len(missing_keys) > 5 else ''}")
        if unexpected_keys:
            print(
                f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ ({len(unexpected_keys)}): {unexpected_keys[:5]}{'...' if len(unexpected_keys) > 5 else ''}")

        if not missing_keys and not unexpected_keys:
            print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ state_dict: {e}")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–ª—é—á–∏
        model_dict = model.state_dict()
        filtered_dict = {k: v for k, v in new_state_dict.items()
                         if k in model_dict and v.shape == model_dict[k].shape}
        model_dict.update(filtered_dict)
        model.load_state_dict(model_dict)
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_dict)} –∏–∑ {len(new_state_dict)} –∫–ª—é—á–µ–π")

    model = model.to(device)
    model.eval()

    print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ .ckpt!")
    return model


def plot_confusion_matrix_detailed(cm, class_names, output_dir):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø—É—Ç–∞–Ω–∏—Ü—ã"""
    cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                xticklabels=class_names, yticklabels=class_names,
                ax=ax1, cbar_kws={'label': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤'})
    ax1.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)')
    ax1.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
    ax1.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')

    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    sns.heatmap(cm_normalized, annot=True, fmt='.2%', cmap='Blues',
                xticklabels=class_names, yticklabels=class_names,
                ax=ax2, cbar_kws={'label': '–î–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞'})
    ax2.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)')
    ax2.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
    ax2.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')

    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'detailed_confusion_matrix.png'),
                dpi=300, bbox_inches='tight')
    plt.close()


def print_detailed_metrics(results, class_names):
    """–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print(f"\n{'=' * 60}")
    print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'=' * 60}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print(f"üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {results['accuracy']:.4f} ({results['accuracy'] * 100:.2f}%)")
    print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø–æ—Ç–µ—Ä—è: {results['loss']:.4f}")

    # –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –ø—É—Ç–∞–Ω–∏—Ü—ã
    cm = results['confusion_matrix']
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –ø—É—Ç–∞–Ω–∏—Ü—ã:")
    print(f"–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã:")
    for i, true_class in enumerate(class_names):
        for j, pred_class in enumerate(class_names):
            print(f"  {true_class} ‚Üí {pred_class}: {cm[i, j]}")

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if len(class_names) == 2:
        tn, fp, fn, tp = cm.ravel()
        sensitivity = tp / (tp + fn) if (tp + fn) > 0 else 0
        specificity = tn / (tn + fp) if (tn + fp) > 0 else 0
        ppv = tp / (tp + fp) if (tp + fp) > 0 else 0
        npv = tn / (tn + fn) if (tn + fn) > 0 else 0

        print(f"\nü©∫ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"  –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Sensitivity/Recall): {sensitivity:.4f} ({sensitivity * 100:.2f}%)")
        print(f"  –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å (Specificity): {specificity:.4f} ({specificity * 100:.2f}%)")
        print(f"  –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (PPV): {ppv:.4f} ({ppv * 100:.2f}%)")
        print(f"  –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (NPV): {npv:.4f} ({npv * 100:.2f}%)")

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º
    print(f"\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    print(classification_report(results['labels'], results['predictions'],
                                target_names=class_names))


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"üñ•Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    # –ü–æ–∏—Å–∫ checkpoint
    checkpoint_path = find_best_checkpoint()
    if not checkpoint_path:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω .ckpt —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    # üëâ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–¢ –ñ–ï ModelConfig, —á—Ç–æ –∏ –≤ train.py
    print("=" * 60)
    print("‚öôÔ∏è  –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)
    cfg = ModelConfig()
    print(cfg.get_training_summary())
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    model = load_model_checkpoint(checkpoint_path, cfg, device)
    if model is None:
        return

    # –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
    test_data_root = 'data/test/'
    test_labels_path = 'data/test/labels.csv'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π
    if not os.path.exists(test_data_root):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {test_data_root}")
        return

    if not os.path.exists(test_labels_path):
        print(f"‚ùå –§–∞–π–ª —Å –º–µ—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_labels_path}")
        return

    print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   - –î–∞–Ω–Ω—ã–µ: {test_data_root}")
    print(f"   - –ú–µ—Ç–∫–∏: {test_labels_path}")

    # –°–æ–∑–¥–∞–Ω–∏–µ namespace –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ - –¢–û–ß–ù–û –ö–ê–ö –í TRAIN.PY
    class OptNamespace:
        pass

    opt = OptNamespace()
    for key, value in cfg.__dict__.items():
        setattr(opt, key, value)
    opt.phase = 'test'  # üëà –í–ê–ñ–ù–û: —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∞
    opt.pin_memory = cfg.pin_memory

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    test_dataset = MedicalTensorDataset(
        data_root=test_data_root,
        img_list=test_labels_path,
        sets=opt
    )

    print(f"üìà –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {len(test_dataset)} –æ–±—Ä–∞–∑—Ü–æ–≤")

    # DataLoader
    test_loader = DataLoader(
        test_dataset,
        batch_size=1,
        shuffle=False,
        num_workers=0,
        pin_memory=False  # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = 'test_results'
    os.makedirs(output_dir, exist_ok=True)

    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    print("=" * 60)
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("=" * 60)

    class_names = ['–ù–æ—Ä–º–∞', '–ü–∞—Ç–æ–ª–æ–≥–∏—è']

    results = evaluate_model(
        model=model,
        test_loader=test_loader,
        device=device,
        class_names=class_names,
        save_results=True,
        output_dir=output_dir
    )

    # –ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    print_detailed_metrics(results, class_names)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø—É—Ç–∞–Ω–∏—Ü—ã
    plot_confusion_matrix_detailed(results['confusion_matrix'], class_names, output_dir)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ROC-–∫—Ä–∏–≤–æ–π
    if 'probabilities' in results:
        plot_roc_curve(results['labels'], results['probabilities'], class_names, output_dir)

    print(f"\nüíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {output_dir}")
    print("üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("   - evaluation_metrics.txt - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    print("   - confusion_matrix.png - –º–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã")
    print("   - detailed_confusion_matrix.png - –¥–µ—Ç–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã")
    print("   - predictions.csv - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞")
    if 'probabilities' in results:
        print("   - roc_curve.png - ROC-–∫—Ä–∏–≤–∞—è")

    print(f"\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {results['accuracy'] * 100:.2f}% —Ç–æ—á–Ω–æ—Å—Ç–∏")
    print("=" * 60)


if __name__ == "__main__":
    main()